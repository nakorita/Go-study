package main

import "fmt"

func main() {
	i, j := 42, 2701

	// i를 가리킨다.
	p := &i
	// i를 포인터로 읽는다.
	fmt.Println(*p)

	// 포인터로 i를 설정한다.
	*p = 21
	// i의 새로운 값을 확인한다
	fmt.Println(i)

	// j를 가리킨다.
	p = &j
	fmt.Println(p, j)
	// j를 포인터로 나눈다.
	*p = *p / 37
	// j의 새로운 값을 확인한다.
	fmt.Println(j)
}

// 기초 - 더 많은 타입들 - pointers
// 포인터는 값의 메모리 주소를 갖고 있다.
// *T 타입은 T값을 가리키는 포인터이다.
// 이것의 Zero value는 nil이다.
// &연산자는 피연산자에 대한 포인터를 생성한다.
// *연산자는 포인터가 가리키는 주소의 값을 나타낸다.
// 코드 9, 14를 보면 이를 "역 참조" 혹은 "간접 참조"
// 라고도 알려져 있다.
// C와 달리 Go는 포인터 산술 지원하지 않는다.
